{
  "openapi": "3.0.0",
  "info": {
    "title": "E-Commerce API",
    "version": "1.0.0",
    "description": "E-Commerce API by Arashnasrivatan `coded while learning`",
    "contact": {
      "name": "Arashnasrivatan",
      "url": "https://arashnasri.com",
      "email": "arashnasrivatan@gmail.com"
    }
  },
  "host": "http://localhost:4000",
  "basePath": "/api",
  "tags": [
    {
      "name": "Auth üîê",
      "description": "Authentication related endpoints"
    },
    {
      "name": "Users üßë‚Äçüíª",
      "description": "Users related endpoints"
    },
    {
      "name": "Bans üö´",
      "description": "Bans related endpoints"
    },
    {
      "name": "Addresses üìç",
      "description": "Addresses related endpoints"
    },
    {
      "name": "Categories üìÇ",
      "description": "Categories&subCategories related endpoints"
    },
    {
      "name": "SubCategories üìÇ",
      "description": "Sub Sub Categories related endpoints"
    },
    {
      "name": "Products üõçÔ∏è",
      "description": "Products related endpoints"
    },
    {
      "name": "Comments üí¨",
      "description": "Comments related endpoints"
    },
    {
      "name": "Cart üõí",
      "description": "Cart related endpoints"
    },
    {
      "name": "Checkout üõí",
      "description": "Checkout related endpoints"
    },
    {
      "name": "Orders üõí",
      "description": "Orders related endpoints"
    }
  ],
  "servers": [
    {
      "url": "http://localhost:4000",
      "description": "Development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "AccessToken": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "To access protected endpoints, you must send the access token in the Authorization header as Bearer [token]"
      },
      "RefreshToken": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "To refresh the access token, send the refresh token in the Authorization header as Bearer [token]"
      }
    },
    "schemas": {
      "ApiResponse": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "statusCode": { "type": "number" },
          "message": { "type": "string" },
          "data": { "type": "object" }
        }
      },
      "AccessToken": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT access token"
          },
          "expiresIn": {
            "type": "integer",
            "description": "Expiration time in seconds"
          }
        }
      },
      "RefreshToken": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT refresh token"
          },
          "expiresIn": {
            "type": "integer",
            "description": "Expiration time in seconds"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "fullname": { "type": "string", "required": true },
          "username": { "type": "string", "required": true },
          "phone": { "type": "string", "required": true },
          "role": { "type": "string" },
          "password": { "type": "string", "required": true },
          "addresses": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Address" }
          },
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" }
        }
      },
      "Ban": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "phone": { "type": "string", "required": true },
          "banReason": { "type": "string", "required": false }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "required": true },
          "postalCode": { "type": "string", "required": true },
          "location": {
            "type": "object",
            "properties": {
              "lat": { "type": "number", "required": true },
              "lng": { "type": "number", "required": true },
              "formatedLocation": { "type": "string", "required": false }
            }
          },
          "address": { "type": "string", "required": true }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "title": {
            "type": "string",
            "required": true,
            "trim": true
          },
          "slug": {
            "type": "string",
            "required": true,
            "trim": true
          },
          "parent": {
            "type": "string",
            "description": "ID of the parent category (optional)"
          },
          "filters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": { "type": "string", "required": true },
                "slug": { "type": "string", "required": false },
                "description": { "type": "string", "required": false },
                "type": {
                  "type": "string",
                  "enum": ["selectbox", "radio", "range"],
                  "required": true
                },
                "options": {
                  "type": "array",
                  "items": { "type": "string" },
                  "required": false
                },
                "min": { "type": "number", "required": false },
                "max": { "type": "number", "required": false }
              },
              "required": ["name", "type"]
            },
            "description": "Array of filter objects for the category"
          }
        }
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/api/auth/sent": {
      "post": {
        "summary": "Send a verification code to the user's phone number",
        "description": "Send a verification code to the user's phone number for registration or verification purposes. Will check if the user is banned, if the phone number already exists, and whether a recent OTP has been sent.",
        "tags": ["Auth üîê"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "phone": {
                    "type": "string",
                    "example": "09123456789",
                    "description": "User's phone number in the format 09XXXXXXXX"
                  }
                },
                "required": ["phone"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "statusCode": { "type": "integer", "example": 200 },
                    "message": {
                      "type": "string",
                      "example": "Otp Sent Successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "otpCode": {
                          "type": "string",
                          "example": "123456",
                          "description": "The OTP code (only provided in test/sandbox environment)"
                        }
                      }
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Various validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "a user exist with this info"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "Otp Already Sent Try Again After 2:30"
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "expired": { "type": "boolean", "example": false },
                            "remainingTime": {
                              "type": "string",
                              "example": "2:30"
                            }
                          }
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "Failed To Send Sms"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is banned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 403 },
                    "message": { "type": "string", "example": "You are banned" }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/verify": {
      "post": {
        "summary": "Verify OTP and register user",
        "description": "Verify the OTP code sent to the user's phone number and create a new user account if verification is successful",
        "tags": ["Auth üîê"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "fullname": {
                    "type": "string",
                    "example": "John Doe",
                    "description": "User's full name"
                  },
                  "username": {
                    "type": "string",
                    "example": "johndoe",
                    "description": "Unique username for the user"
                  },
                  "phone": {
                    "type": "string",
                    "example": "09123456789",
                    "description": "User's phone number that received the OTP"
                  },
                  "password": {
                    "type": "string",
                    "example": "StrongPassword_123",
                    "description": "User's chosen password"
                  },
                  "otp": {
                    "type": "string",
                    "example": "1234",
                    "description": "One-time password (verification code) received via SMS"
                  }
                },
                "required": ["fullname", "username", "phone", "password", "otp"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "statusCode": { "type": "integer", "example": 201 },
                    "message": {
                      "type": "string",
                      "example": "User Registered Successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                          "description": "JWT access token for authenticated requests"
                        },
                        "refreshToken": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                          "description": "JWT refresh token to obtain new access tokens"
                        }
                      }
                    }
                  },
                  "required": ["success", "statusCode", "message", "data"]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Various validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "a user exist with this username"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "Otp Expired"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "Invalid Otp"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is banned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 403 },
                    "message": { "type": "string", "example": "You are banned" }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "summary": "User login",
        "description": "Authenticate user with username and password to receive access and refresh tokens",
        "tags": ["Auth üîê"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "johndoe",
                    "description": "User's unique username"
                  },
                  "password": {
                    "type": "string",
                    "example": "StrongPassword_123",
                    "description": "User's password"
                  }
                },
                "required": ["username", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "statusCode": { "type": "integer", "example": 200 },
                    "message": {
                      "type": "string",
                      "example": "User Loged In Successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                          "description": "JWT access token for authenticated requests"
                        },
                        "refreshToken": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                          "description": "JWT refresh token to obtain new access tokens"
                        }
                      }
                    }
                  },
                  "required": ["success", "statusCode", "message", "data"]
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed - Invalid credentials",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/forgot-password": {
      "post": {
        "summary": "Request password reset",
        "description": "Request a password reset link by providing your phone number. The link will be sent to your phone.",
        "tags": ["Auth üîê"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "phone": {
                    "type": "string",
                    "example": "09123456789",
                    "description": "Phone number associated with the user account"
                  }
                },
                "required": ["phone"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset link sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "statusCode": { "type": "integer", "example": 200 },
                    "message": {
                      "type": "string",
                      "example": "Reset password link sent to phone number"
                    },
                    "data": {
                      "type": "string",
                      "example": "http://localhost:4000/api/auth/reset-password/f47ac10b-58cc-4372-a567-0e02b2c3d479",
                      "description": "Reset link (only provided in development environment)"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "400": {
            "description": "Rate limited - Too many reset requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 400 },
                    "message": {
                      "type": "string",
                      "example": "try again in 01:45"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 404 },
                    "message": {
                      "type": "string",
                      "example": "No User Found With This Phone Number"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Error while sending sms"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/reset-password/{token}": {
      "post": {
        "summary": "Reset user password",
        "description": "Reset user password using a valid reset token that was sent to the user's phone",
        "tags": ["Auth üîê"],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "description": "Reset token received via SMS",
            "schema": {
              "type": "string"
            },
            "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "newPassword": {
                    "type": "string",
                    "example": "NewStrongPassword_123",
                    "description": "New password for the account"
                  },
                  "confirmPassword": {
                    "type": "string",
                    "example": "NewStrongPassword_123",
                    "description": "Confirmation of the new password (must match newPassword)"
                  }
                },
                "required": ["newPassword", "confirmPassword"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "statusCode": { "type": "integer", "example": 200 },
                    "message": {
                      "type": "string",
                      "example": "Password changed successfully"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Various validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "the resetToken does not exist or expired"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "newPassword And Confirm Password values must be same"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "no user found with this phone number"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/me": {
      "get": {
        "summary": "Get current user information",
        "description": "Retrieves the authenticated user's profile information",
        "tags": ["Auth üîê"],
        "security": [
          {
            "AccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "User data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "statusCode": { "type": "integer", "example": 200 },
                    "message": { "type": "string", "example": "User data" },
                    "data": { "$ref": "#/components/schemas/User" }
                  },
                  "required": ["success", "statusCode", "message", "data"]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 404 },
                    "message": { "type": "string", "example": "User not found" }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/refresh": {
      "get": {
        "summary": "Refresh access token",
        "description": "Get a new access token using a valid refresh token",
        "tags": ["Auth üîê"],
        "security": [
          {
            "RefreshToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "New access token created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "statusCode": { "type": "integer", "example": 200 },
                    "message": {
                      "type": "string",
                      "example": "new accessToken created Successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                          "description": "New JWT access token for authenticated requests"
                        }
                      }
                    }
                  },
                  "required": ["success", "statusCode", "message", "data"]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid refresh token or session expired",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 401 },
                    "message": {
                      "type": "string",
                      "example": "Please Login Again"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "get": {
        "summary": "Logout user",
        "description": "Invalidate user's refresh token and log them out of the system",
        "tags": ["Auth üîê"],
        "security": [
          {
            "AccessToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "statusCode": { "type": "integer", "example": 200 },
                    "message": {
                      "type": "string",
                      "example": "Logout Successfully"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "400": {
            "description": "Logout failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 400 },
                    "message": { "type": "string", "example": "Logout failed" }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired access token",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          }
        }
      }
    },
    "/api/users/profile": {
      "patch": {
        "summary": "Update user profile",
        "description": "Update the current user's profile information. Admins can also update other users' profiles.",
        "tags": ["Users üßë‚Äçüíª"],
        "security": [
          {
            "AccessToken": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "description": "ID of the user to update (admin only)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "fullname": {
                    "type": "string",
                    "example": "John Smith",
                    "description": "User's full name"
                  },
                  "username": {
                    "type": "string",
                    "example": "johnsmith",
                    "description": "User's unique username"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "statusCode": { "type": "integer", "example": 200 },
                    "message": {
                      "type": "string",
                      "example": "Profile updated successfully"
                    },
                    "data": { "$ref": "#/components/schemas/User" }
                  },
                  "required": ["success", "statusCode", "message", "data"]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "A user exists with this username"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "Invalid user_id"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 403 },
                    "message": {
                      "type": "string",
                      "example": "You cannot edit another admin's profile"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 404 },
                    "message": { "type": "string", "example": "User not found" }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          }
        }
      }
    },
    "/api/users/change-password": {
      "post": {
        "summary": "Change user password",
        "description": "Allow authenticated users to change their password by providing their old password and a new one",
        "tags": ["Users üßë‚Äçüíª"],
        "security": [
          {
            "AccessToken": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "oldPassword": {
                    "type": "string",
                    "example": "CurrentPassword_123",
                    "description": "User's current password"
                  },
                  "newPassword": {
                    "type": "string",
                    "example": "NewStrongPassword_456",
                    "description": "New password to set"
                  },
                  "confirmPassword": {
                    "type": "string",
                    "example": "NewStrongPassword_456",
                    "description": "Confirmation of the new password (must match newPassword)"
                  }
                },
                "required": ["oldPassword", "newPassword", "confirmPassword"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "statusCode": { "type": "integer", "example": 200 },
                    "message": {
                      "type": "string",
                      "example": "Password updated successfully"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "old Password is incorect"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "new password and confirm password do not match"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          }
        }
      }
    },
    "/api/users/delete-account": {
      "delete": {
        "summary": "Delete user account",
        "description": "Delete a user account. Regular users can only delete their own account. Admins can delete other users' accounts (except other admins) by providing a user_id query parameter.",
        "tags": ["Users üßë‚Äçüíª"],
        "security": [
          {
            "AccessToken": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "description": "ID of the user to delete (admin only)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "statusCode": { "type": "integer", "example": 200 },
                    "message": {
                      "type": "string",
                      "example": "Account deleted successfully"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "400": {
            "description": "Invalid user ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 400 },
                    "message": {
                      "type": "string",
                      "example": "Invalid user ID"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Cannot delete admin accounts",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 403 },
                        "message": {
                          "type": "string",
                          "example": "You cannot delete another admin's account"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 403 },
                        "message": {
                          "type": "string",
                          "example": "Admins cannot delete their own accounts"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 404 },
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          }
        }
      }
    },
    "/api/users/ban": {
      "get": {
        "summary": "Get all banned users",
        "description": "Retrieve a list of all banned users (admin only)",
        "tags": ["Bans üö´", "Users üßë‚Äçüíª"],
        "security": [
          {
            "AccessToken": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved banned users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "statusCode": { "type": "integer", "example": 200 },
                    "message": {
                      "type": "string",
                      "example": "Banned users fetched successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "currentPage": { "type": "integer", "example": 1 },
                            "totalPages": { "type": "integer", "example": 5 },
                            "totalItems": { "type": "integer", "example": 47 },
                            "itemsPerPage": { "type": "integer", "example": 10 }
                          }
                        },
                        "banedUsers": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Ban"
                          }
                        }
                      }
                    }
                  },
                  "required": ["success", "statusCode", "message", "data"]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not an admin",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "No banned users found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 404 },
                    "message": {
                      "type": "string",
                      "example": "No banned users found on this page"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          }
        }
      }
    },
    "/api/users/ban/{phone}": {
      "post": {
        "summary": "Ban a user",
        "description": "Ban a user by their phone number (admin only)",
        "tags": ["Bans üö´", "Users üßë‚Äçüíª"],
        "security": [
          {
            "AccessToken": []
          }
        ],
        "parameters": [
          {
            "name": "phone",
            "in": "path",
            "required": true,
            "description": "Phone number of the user to ban",
            "schema": {
              "type": "string"
            },
            "example": "09123456789"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "banReason": {
                    "type": "string",
                    "description": "Reason for banning the user",
                    "example": "Violation of terms of service"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully banned user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "statusCode": { "type": "integer", "example": 200 },
                    "message": {
                      "type": "string",
                      "example": "User Baned Successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/User"
                        },
                        "banData": {
                          "$ref": "#/components/schemas/Ban"
                        }
                      }
                    }
                  },
                  "required": ["success", "statusCode", "message", "data"]
                }
              }
            }
          },
          "400": {
            "description": "Cannot ban admin",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 400 },
                    "message": {
                      "type": "string",
                      "example": "you cant ban admins"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not an admin",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 404 },
                    "message": {
                      "type": "string",
                      "example": "there is no user with this phone number"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Unban a user",
        "description": "Remove a user from the ban list by their phone number (admin only)",
        "tags": ["Bans üö´", "Users üßë‚Äçüíª"],
        "security": [
          {
            "AccessToken": []
          }
        ],
        "parameters": [
          {
            "name": "phone",
            "in": "path",
            "required": true,
            "description": "Phone number of the user to unban",
            "schema": {
              "type": "string"
            },
            "example": "09123456789"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully unbanned user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "statusCode": { "type": "integer", "example": 200 },
                    "message": {
                      "type": "string",
                      "example": "User unBaned Successfully"
                    },
                    "data": {
                      "type": "object"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not an admin",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Banned user not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 404 },
                    "message": {
                      "type": "string",
                      "example": "there is no Baned User with this phone number"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          }
        }
      }
    },
    "/api/users/addresses": {
      "get": {
        "summary": "Get user addresses",
        "description": "Retrieve all addresses for a user. Regular users can only see their own addresses. Admins can view any user's addresses by providing a user_id query parameter.",
        "tags": ["Addresses üìç", "Users üßë‚Äçüíª"],
        "security": [
          {
            "AccessToken": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "description": "ID of the user whose addresses to retrieve (admin only)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Addresses retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "statusCode": { "type": "integer", "example": 200 },
                    "message": {
                      "type": "string",
                      "example": "Addresses found"
                    },
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Address" }
                    }
                  },
                  "required": ["success", "statusCode", "message", "data"]
                }
              }
            }
          },
          "400": {
            "description": "Invalid user ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 400 },
                    "message": {
                      "type": "string",
                      "example": "Invalid user_id"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 404 },
                    "message": { "type": "string", "example": "User not found" }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add new address",
        "description": "Add a new address for a user. Regular users can only add addresses to their own profile. Admins can add addresses to any user's profile by providing a user_id query parameter.",
        "tags": ["Addresses üìç", "Users üßë‚Äçüíª"],
        "security": [
          {
            "AccessToken": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "description": "ID of the user to add address for (admin only)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Home",
                    "description": "Name/label for the address"
                  },
                  "postalCode": {
                    "type": "string",
                    "example": "1934767810",
                    "description": "Postal code of the address: It must be numeric, exactly 10 digits long. The first five digits cannot start with 0, the digit '2' cannot be used, the first four digits must not be the same, the fifth digit cannot be '5', and all digits must be different."
                  },
                  "location": {
                    "type": "object",
                    "properties": {
                      "lat": {
                        "type": "number",
                        "example": 35.6892,
                        "description": "Latitude coordinate"
                      },
                      "lng": {
                        "type": "number",
                        "example": 51.389,
                        "description": "Longitude coordinate"
                      }
                    },
                    "required": ["lat", "lng"]
                  },
                  "address": {
                    "type": "string",
                    "example": "123 Main St, Tehran, Iran",
                    "description": "Full address text"
                  }
                },
                "required": ["name", "postalCode", "location", "address"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Address added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "statusCode": { "type": "integer", "example": 200 },
                    "message": {
                      "type": "string",
                      "example": "Address added successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Address" }
                    }
                  },
                  "required": ["success", "statusCode", "message", "data"]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Various validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "Invalid user_id"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "Location must be within Iran"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "An address with this name already exists"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "An address with this postal code already exists"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 404 },
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          }
        }
      }
    },
    "/api/users/addresses/{id}": {
      "get": {
        "summary": "Get specific address",
        "description": "Retrieve a specific address by ID. Regular users can only access their own addresses. Admins can access any user's addresses by providing a user_id query parameter.",
        "tags": ["Addresses üìç", "Users üßë‚Äçüíª"],
        "security": [
          {
            "AccessToken": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the address to retrieve. Admins can retrieve addresses from any user, while regular users can only access their own addresses.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "description": "ID of the user whose address to retrieve (admin only)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Address retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "statusCode": { "type": "integer", "example": 200 },
                    "message": {
                      "type": "string",
                      "example": "Address found successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Address" }
                    }
                  },
                  "required": ["success", "statusCode", "message", "data"]
                }
              }
            }
          },
          "400": {
            "description": "Invalid address ID or user ID",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "Invalid address id"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "Invalid user_id"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Address or user not found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 404 },
                        "message": {
                          "type": "string",
                          "example": "User not found"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 404 },
                        "message": {
                          "type": "string",
                          "example": "Address not found"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update address",
        "description": "Update an existing address. Regular users can only update their own addresses. Admins can update any user's addresses by providing a user_id query parameter.",
        "tags": ["Addresses üìç"],
        "security": [
          {
            "AccessToken": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the address to update",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "description": "ID of the user whose address to update (admin only)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Home",
                    "description": "Name/label for the address"
                  },
                  "postalCode": {
                    "type": "string",
                    "example": "1234567890",
                    "description": "Postal code of the address"
                  },
                  "location": {
                    "type": "object",
                    "properties": {
                      "lat": {
                        "type": "number",
                        "example": 35.6892,
                        "description": "Latitude coordinate"
                      },
                      "lng": {
                        "type": "number",
                        "example": 51.389,
                        "description": "Longitude coordinate"
                      }
                    }
                  },
                  "address": {
                    "type": "string",
                    "example": "123 Main St, Tehran, Iran",
                    "description": "Full address text"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Address updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "statusCode": { "type": "integer", "example": 200 },
                    "message": {
                      "type": "string",
                      "example": "Address updated successfully"
                    },
                    "data": { "$ref": "#/components/schemas/Address" }
                  },
                  "required": ["success", "statusCode", "message", "data"]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Various validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "Invalid user_id"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "Invalid address_id"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "An address with this name already exists"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "An address with this postal code already exists"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "Location must be within Iran"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Address or user not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 404 },
                    "message": {
                      "type": "string",
                      "example": "Address not found"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete address",
        "description": "Delete an existing address. Regular users can only delete their own addresses. Admins can delete any user's addresses by providing a user_id query parameter.",
        "tags": ["Addresses üìç"],
        "security": [
          {
            "AccessToken": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the address to delete",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "description": "ID of the user whose address to delete (admin only)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Address deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "statusCode": { "type": "integer", "example": 200 },
                    "message": {
                      "type": "string",
                      "example": "Address deleted successfully"
                    },
                    "data": { "$ref": "#/components/schemas/Address" }
                  },
                  "required": ["success", "statusCode", "message", "data"]
                }
              }
            }
          },
          "400": {
            "description": "Invalid address ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 400 },
                    "message": {
                      "type": "string",
                      "example": "Invalid address id"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Address not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 404 },
                    "message": {
                      "type": "string",
                      "example": "Address not found"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          }
        }
      }
    },
    "/api/category": {
      "get": {
        "summary": "Get all categories",
        "description": "Retrieve all categories with their subcategories in a hierarchical structure",
        "tags": ["Categories üìÇ"],
        "responses": {
          "200": {
            "description": "Categories retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "statusCode": { "type": "integer", "example": 200 },
                    "message": {
                      "type": "string",
                      "example": "Categories fetched successfully !!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "categories": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "_id": { "type": "string" },
                              "title": { "type": "string" },
                              "slug": { "type": "string" },
                              "filters": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "name": { "type": "string" },
                                    "slug": { "type": "string" },
                                    "type": {
                                      "type": "string",
                                      "enum": ["selectbox", "radio", "range"]
                                    },
                                    "options": {
                                      "type": "array",
                                      "items": { "type": "string" }
                                    },
                                    "_id": { "type": "string" }
                                  }
                                }
                              },
                              "__v": { "type": "integer" },
                              "subCategories": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "_id": { "type": "string" },
                                    "title": { "type": "string" },
                                    "slug": { "type": "string" },
                                    "parent": { "type": "string" },
                                    "filters": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": { "type": "string" },
                                          "slug": { "type": "string" },
                                          "type": {
                                            "type": "string",
                                            "enum": [
                                              "selectbox",
                                              "radio",
                                              "range"
                                            ]
                                          },
                                          "options": {
                                            "type": "array",
                                            "items": { "type": "string" }
                                          },
                                          "_id": { "type": "string" }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": ["success", "statusCode", "message", "data"]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new category",
        "description": "Create a new category. Only admins can create categories.",
        "tags": ["Categories üìÇ"],
        "security": [
          {
            "AccessToken": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Electronics",
                    "description": "Title of the category"
                  },
                  "slug": {
                    "type": "string",
                    "example": "electronics",
                    "description": "URL-friendly slug for the category"
                  },
                  "parent": {
                    "type": "string",
                    "example": "67bf56225c2b2cf388a9524f",
                    "description": "ID of the parent category (optional)"
                  },
                  "filters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "color",
                          "description": "Name of the filter"
                        },
                        "slug": {
                          "type": "string",
                          "example": "mobile-version-color",
                          "description": "Slug for the filter"
                        },
                        "type": {
                          "type": "string",
                          "example": "selectbox",
                          "description": "Type of the filter"
                        },
                        "options": {
                          "type": "array",
                          "items": { "type": "string" },
                          "example": ["white", "blue", "black"],
                          "description": "Options for the filter"
                        }
                      },
                      "required": ["name", "slug", "type", "options"]
                    },
                    "description": "Array of filter objects for the category"
                  }
                },
                "required": ["title", "slug"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "statusCode": { "type": "integer", "example": 201 },
                    "message": {
                      "type": "string",
                      "example": "Category created successfully !!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "category": { "$ref": "#/components/schemas/Category" }
                      }
                    }
                  },
                  "required": ["success", "statusCode", "message", "data"]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Various validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "Invalid parent category ID"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "Category title already exists"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "Category slug already exists"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not an admin",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Parent category not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 404 },
                    "message": {
                      "type": "string",
                      "example": "Parent category not found"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          }
        }
      }
    },
    "/api/category/{categoryId}": {
      "delete": {
        "summary": "Delete a category",
        "description": "Delete a category and its subcategories. Only admins can delete categories.",
        "tags": ["Categories üìÇ"],
        "security": [
          {
            "AccessToken": []
          }
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "description": "ID of the category to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "statusCode": { "type": "integer", "example": 200 },
                    "message": {
                      "type": "string",
                      "example": "Category and its subcategories deleted successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "category": { "$ref": "#/components/schemas/Category" },
                        "deletedSubcategories": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/Category" }
                        },
                        "deletedSubSubCategories": {
                          "type": "object",
                          "properties": {
                            "deletedCount": { "type": "integer" }
                          }
                        }
                      }
                    }
                  },
                  "required": ["success", "statusCode", "message", "data"]
                }
              }
            }
          },
          "400": {
            "description": "Invalid category ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 400 },
                    "message": {
                      "type": "string",
                      "example": "Category ID is not valid !!"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not an admin",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 404 },
                    "message": {
                      "type": "string",
                      "example": "Category not found !!"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a category",
        "description": "Update an existing category. Only admins can update categories.",
        "tags": ["Categories üìÇ"],
        "security": [
          {
            "AccessToken": []
          }
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "description": "ID of the category to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Updated Electronics",
                    "description": "New title for the category"
                  },
                  "slug": {
                    "type": "string",
                    "example": "updated-electronics",
                    "description": "New URL-friendly slug for the category"
                  },
                  "parent": {
                    "type": "string",
                    "example": "67bf56225c2b2cf388a9524f",
                    "description": "ID of the new parent category (optional)"
                  },
                  "filters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "color",
                          "description": "Name of the filter"
                        },
                        "slug": {
                          "type": "string",
                          "example": "mobile-version-color",
                          "description": "Slug for the filter"
                        },
                        "type": {
                          "type": "string",
                          "example": "selectbox",
                          "description": "Type of the filter"
                        },
                        "options": {
                          "type": "array",
                          "items": { "type": "string" },
                          "example": ["white", "blue", "black"],
                          "description": "Options for the filter"
                        }
                      }
                    },
                    "description": "Array of filter objects for the category"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "statusCode": { "type": "integer", "example": 200 },
                    "message": {
                      "type": "string",
                      "example": "Category updated successfully !!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "category": { "$ref": "#/components/schemas/Category" }
                      }
                    }
                  },
                  "required": ["success", "statusCode", "message", "data"]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Various validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "Category ID is not valid !!"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "Invalid parent category ID"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "Title already exists !!"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "Slug already exists !!"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not an admin",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 404 },
                    "message": {
                      "type": "string",
                      "example": "Category not found !!"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          }
        }
      }
    },
    "/api/category/sub": {
      "get": {
        "summary": "Get all subcategories",
        "description": "Retrieve all subcategories with their parent category information",
        "tags": ["SubCategories üìÇ"],
        "responses": {
          "200": {
            "description": "Subcategories retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "statusCode": { "type": "integer", "example": 200 },
                    "message": {
                      "type": "string",
                      "example": "SubCategories fetched successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "subCategories": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "_id": { "type": "string" },
                              "title": { "type": "string" },
                              "slug": { "type": "string" },
                              "parent": {
                                "$ref": "#/components/schemas/Category"
                              },
                              "filters": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "name": { "type": "string" },
                                    "slug": { "type": "string" },
                                    "type": {
                                      "type": "string",
                                      "enum": ["selectbox", "radio", "range"]
                                    },
                                    "options": {
                                      "type": "array",
                                      "items": { "type": "string" }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": ["success", "statusCode", "message", "data"]
                }
              }
            }
          },
          "404": {
            "description": "No subcategories found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 404 },
                    "message": {
                      "type": "string",
                      "example": "SubCategories not found !!"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new subcategory",
        "description": "Create a new subcategory. Only admins can create subcategories.",
        "tags": ["SubCategories üìÇ"],
        "security": [
          {
            "AccessToken": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Smartphones",
                    "description": "Title of the subcategory"
                  },
                  "slug": {
                    "type": "string",
                    "example": "smartphones",
                    "description": "URL-friendly slug for the subcategory"
                  },
                  "parent": {
                    "type": "string",
                    "example": "67bf56225c2b2cf388a9524f",
                    "description": "ID of the parent category"
                  },
                  "filters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "color",
                          "description": "Name of the filter"
                        },
                        "slug": {
                          "type": "string",
                          "example": "mobile-version-color",
                          "description": "Slug for the filter"
                        },
                        "type": {
                          "type": "string",
                          "example": "selectbox",
                          "description": "Type of the filter"
                        },
                        "options": {
                          "type": "array",
                          "items": { "type": "string" },
                          "example": ["white", "blue", "black"],
                          "description": "Options for the filter"
                        }
                      }
                    },
                    "description": "Array of filter objects for the subcategory"
                  }
                },
                "required": ["title", "slug", "parent"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Subcategory created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "statusCode": { "type": "integer", "example": 201 },
                    "message": {
                      "type": "string",
                      "example": "SubCategory created successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "object",
                          "properties": {
                            "_id": { "type": "string" },
                            "title": { "type": "string" },
                            "slug": { "type": "string" },
                            "parent": { "type": "string" },
                            "filters": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": { "type": "string" },
                                  "slug": { "type": "string" },
                                  "type": { "type": "string" },
                                  "options": {
                                    "type": "array",
                                    "items": { "type": "string" }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": ["success", "statusCode", "message", "data"]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Various validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "Parent ID or its a main category is not correct !!"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "Title already exists for this category !!"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "Slug already exists for this category !!"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not an admin",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 403 },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          }
        }
      }
    },
    "/api/category/sub/{categoryId}": {
      "get": {
        "summary": "Get a specific subcategory",
        "description": "Retrieve a specific subcategory by its ID",
        "tags": ["SubCategories üìÇ"],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "description": "ID of the subcategory to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subcategory retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "statusCode": { "type": "integer", "example": 200 },
                    "message": {
                      "type": "string",
                      "example": "SubCategory fetched successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "subCategory": {
                          "type": "object",
                          "properties": {
                            "_id": { "type": "string" },
                            "title": { "type": "string" },
                            "slug": { "type": "string" },
                            "parent": { "type": "string" },
                            "filters": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": { "type": "string" },
                                  "slug": { "type": "string" },
                                  "type": { "type": "string" },
                                  "options": {
                                    "type": "array",
                                    "items": { "type": "string" }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": ["success", "statusCode", "message", "data"]
                }
              }
            }
          },
          "400": {
            "description": "Invalid category ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 400 },
                    "message": {
                      "type": "string",
                      "example": "Invalid Category ID !!"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "404": {
            "description": "Subcategory not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 404 },
                    "message": {
                      "type": "string",
                      "example": "SubCategory not found !!"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a subcategory",
        "description": "Update an existing subcategory. Only admins can update subcategories.",
        "tags": ["SubCategories üìÇ"],
        "security": [
          {
            "AccessToken": []
          }
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "description": "ID of the subcategory to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Updated Smartphones",
                    "description": "New title for the subcategory"
                  },
                  "slug": {
                    "type": "string",
                    "example": "updated-smartphones",
                    "description": "New URL-friendly slug for the subcategory"
                  },
                  "parent": {
                    "type": "string",
                    "example": "67bf56225c2b2cf388a9524f",
                    "description": "ID of the new parent category"
                  },
                  "filters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "color",
                          "description": "Name of the filter"
                        },
                        "slug": {
                          "type": "string",
                          "example": "mobile-version-color",
                          "description": "Slug for the filter"
                        },
                        "type": {
                          "type": "string",
                          "example": "selectbox",
                          "description": "Type of the filter"
                        },
                        "options": {
                          "type": "array",
                          "items": { "type": "string" },
                          "example": ["white", "blue", "black"],
                          "description": "Options for the filter"
                        }
                      }
                    },
                    "description": "Array of filter objects for the subcategory"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subcategory updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "statusCode": { "type": "integer", "example": 200 },
                    "message": {
                      "type": "string",
                      "example": "SubCategory updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "subCategory": {
                          "type": "object",
                          "properties": {
                            "_id": { "type": "string" },
                            "title": { "type": "string" },
                            "slug": { "type": "string" },
                            "parent": { "type": "string" },
                            "filters": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": { "type": "string" },
                                  "slug": { "type": "string" },
                                  "type": { "type": "string" },
                                  "options": {
                                    "type": "array",
                                    "items": { "type": "string" }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": ["success", "statusCode", "message", "data"]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Various validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "Invalid Category ID !!"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "Parent ID or its a main category is not correct !!"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "Title already exists for this category !!"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": { "type": "boolean", "example": false },
                        "statusCode": { "type": "integer", "example": 400 },
                        "message": {
                          "type": "string",
                          "example": "Slug already exists for this category !!"
                        }
                      },
                      "required": ["success", "statusCode", "message"]
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not an admin",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 403 },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "404": {
            "description": "Subcategory not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 404 },
                    "message": {
                      "type": "string",
                      "example": "SubCategory not found !!"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a subcategory",
        "description": "Delete a specific subcategory. Only admins can delete subcategories.",
        "tags": ["SubCategories üìÇ"],
        "security": [
          {
            "AccessToken": []
          }
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "description": "ID of the subcategory to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subcategory deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "statusCode": { "type": "integer", "example": 200 },
                    "message": {
                      "type": "string",
                      "example": "SubCategory deleted successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "subCategory": {
                          "type": "object",
                          "properties": {
                            "_id": { "type": "string" },
                            "title": { "type": "string" },
                            "slug": { "type": "string" },
                            "parent": { "type": "string" },
                            "filters": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": { "type": "string" },
                                  "slug": { "type": "string" },
                                  "type": { "type": "string" },
                                  "options": {
                                    "type": "array",
                                    "items": { "type": "string" }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": ["success", "statusCode", "message", "data"]
                }
              }
            }
          },
          "400": {
            "description": "Invalid category ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 400 },
                    "message": {
                      "type": "string",
                      "example": "Invalid Category ID !!"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not an admin",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 403 },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "404": {
            "description": "Subcategory not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 404 },
                    "message": {
                      "type": "string",
                      "example": "SubCategory not found !!"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "statusCode": { "type": "integer", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["success", "statusCode", "message"]
                }
              }
            }
          }
        }
      }
    }
  }
}
